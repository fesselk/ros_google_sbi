#! /usr/bin/env python
'''creates a nameit service for ROS using google_sbi_tag_it.py'''
import google_sbi_tagit
#rosimports
import rospy
from sensor_msgs.msg import CompressedImage
from ros_google_sbi.msg import *
from ros_google_sbi.srv import *

def nameitgoogle(req):
  '''translates the ros nameit service call to a call to google_sbi_tagit.nameit()'''
  ret = DescriptionTags()
  
  google_sbi_tagit.config = {"stopwordfilter":rospy.get_param('~stopwordfilter',True),
                             "Nimgres":rospy.get_param('~Nimgres',100),
                             "NThreads":rospy.get_param('~NThreads',6),
                             "NTop":rospy.get_param('~NTop',10)}
  
  if req.hint=="":
    req.hint=None
  
  rospy.loginfo(str(google_sbi_tagit.config))
  tags, words, bigrams = google_sbi_tagit.nameit(req.compimg.data,req.hint)
  
  for i in tags:
    ret.tags.append(i)
  
  for word,n in words:
    ret.words.append(WordOccurrence(word,n))
  
  for word,n in bigrams:
    ret.bigrams.append(WordOccurrence(word,n))
  
  return ret

def serv_error(exception, exception_type, exception_value, traceback):
   rospy.logerr(" ".join(('Service error', str(exception),str(exception_type),str(exception_value),str(traceback))))

def serviceWatchdog( name, service, time ):
  def checkService(event):
    try:
      rospy.wait_for_service(name, time/2)
    except:
      rospy.logwarn( " ".join(("Service", name, "is not availible shut it down")) )
      service.shutdown()
  rospy.Timer(rospy.Duration(time/2),checkService)

def init():
  '''initializes a rosnode providing the nameit service'''
  name='nameit'
  rospy.init_node('RosGoogleSbi')
  while 1:
    service = rospy.Service(name, NameItGoogle, nameitgoogle,error_handler=serv_error)
    serviceWatchdog(name, service, 4)
    rospy.loginfo( " ".join((name,"is ready to tag ")) )
    service.spin()
  rospy.loginfo( " ".join((name,"terminated")) )

if __name__ == "__main__":
  init()
